#!/usr/bin/env node

import chalk from 'chalk';
import fs from 'fs';
import path from 'path';

export class StatusCommand {
    async execute(projectPath = '.', options = {}) {
        console.log(chalk.cyan(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞: ${projectPath}`));
        
        if (!fs.existsSync(projectPath)) {
            throw new Error(`–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${projectPath}`);
        }
        
        const requiredFiles = ['package.json', 'src/index.js', 'config.js'];
        let allFilesExist = true;
        
        console.log(chalk.gray('\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤:'));
        
        for (const file of requiredFiles) {
            const filePath = path.join(projectPath, file);
            const exists = fs.existsSync(filePath);
            
            if (exists) {
                console.log(chalk.green(`  ‚úÖ ${file}`));
            } else {
                console.log(chalk.red(`  ‚ùå ${file}`));
                allFilesExist = false;
            }
        }
        
        if (options.health) {
            console.log(chalk.gray('\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint...'));
            console.log(chalk.yellow('‚ö†Ô∏è  HTTP –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞'));
        }
        
        if (options.logs) {
            console.log(chalk.gray('\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:'));
            const logPath = path.join(projectPath, 'logs');
            if (fs.existsSync(logPath)) {
                console.log(chalk.gray('–§—É–Ω–∫—Ü–∏—è —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ'));
            } else {
                console.log(chalk.yellow('‚ö†Ô∏è  –ü–∞–ø–∫–∞ –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'));
            }
        }
        
        console.log('\n' + '='.repeat(50));
        
        if (allFilesExist) {
            console.log(chalk.green('‚úÖ –°—Ç–∞—Ç—É—Å: –ö–æ–ª–ª–µ–∫—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ'));
            return 0;
        } else {
            console.log(chalk.red('‚ùå –°—Ç–∞—Ç—É—Å: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã'));
            console.log(chalk.yellow('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: collector-gen generate <config> –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤'));
            return 1;
        }
    }
}
