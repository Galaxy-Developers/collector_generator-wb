import fs from 'fs';
import path from 'path';
import { promisify } from 'util';

const writeFile = promisify(fs.writeFile);
const mkdir = promisify(fs.mkdir);
const access = promisify(fs.access);

export class FileGenerator {
    constructor() {
        this.generatedFiles = [];
    }
    
    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
     */
    async prepareOutputDirectory(outputPath) {
        try {
            await this.ensureDirectory(outputPath);
            
            // –û—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è (–ø—Ä–∏ force mode)
            const exists = await this.directoryExists(outputPath);
            if (exists) {
                const files = fs.readdirSync(outputPath);
                if (files.length > 0) {
                    console.log(`üìÅ Output directory exists and contains ${files.length} files`);
                }
            }
            
            return true;
        } catch (error) {
            throw new Error(`Failed to prepare output directory: ${error.message}`);
        }
    }
    
    /**
     * –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
     */
    async ensureDirectory(dirPath) {
        try {
            await access(dirPath, fs.constants.F_OK);
        } catch {
            // –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º
            await mkdir(dirPath, { recursive: true });
            console.log(`üìÅ Created directory: ${dirPath}`);
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
     */
    async directoryExists(dirPath) {
        try {
            const stats = fs.statSync(dirPath);
            return stats.isDirectory();
        } catch {
            return false;
        }
    }
    
    /**
     * –ó–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞
     */
    async writeFile(filePath, content) {
        try {
            // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            const parentDir = path.dirname(filePath);
            await this.ensureDirectory(parentDir);
            
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
            await writeFile(filePath, content, 'utf-8');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            this.generatedFiles.push(filePath);
            
            return true;
        } catch (error) {
            throw new Error(`Failed to write file ${filePath}: ${error.message}`);
        }
    }
    
    /**
     * –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
     */
    async copyFile(sourcePath, targetPath) {
        try {
            const content = fs.readFileSync(sourcePath);
            await this.writeFile(targetPath, content);
            return true;
        } catch (error) {
            throw new Error(`Failed to copy file ${sourcePath} to ${targetPath}: ${error.message}`);
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏
     */
    async createSymlink(target, linkPath) {
        try {
            await fs.promises.symlink(target, linkPath);
            this.generatedFiles.push(linkPath);
            return true;
        } catch (error) {
            throw new Error(`Failed to create symlink ${linkPath}: ${error.message}`);
        }
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
     */
    async setFilePermissions(filePath, mode) {
        try {
            await fs.promises.chmod(filePath, mode);
            return true;
        } catch (error) {
            throw new Error(`Failed to set permissions for ${filePath}: ${error.message}`);
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
     */
    async writeExecutableFile(filePath, content) {
        await this.writeFile(filePath, content);
        await this.setFilePermissions(filePath, 0o755);
        return true;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –ø–æ —à–∞–±–ª–æ–Ω—É
     */
    async generateFromTemplate(templatePath, outputPath, variables = {}) {
        try {
            let template = fs.readFileSync(templatePath, 'utf-8');
            
            // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–¥–ª—è —Å–ª—É—á–∞–µ–≤ –±–µ–∑ Handlebars)
            Object.keys(variables).forEach(key => {
                const regex = new RegExp(`{{${key}}}`, 'g');
                template = template.replace(regex, variables[key]);
            });
            
            await this.writeFile(outputPath, template);
            return true;
        } catch (error) {
            throw new Error(`Failed to generate from template ${templatePath}: ${error.message}`);
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
     */
    async touchFile(filePath) {
        await this.writeFile(filePath, '');
        return true;
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ —Ñ–∞–π–ª
     */
    async appendToFile(filePath, content) {
        try {
            await fs.promises.appendFile(filePath, content, 'utf-8');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω
            if (!this.generatedFiles.includes(filePath)) {
                this.generatedFiles.push(filePath);
            }
            
            return true;
        } catch (error) {
            throw new Error(`Failed to append to file ${filePath}: ${error.message}`);
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ JSON —Ñ–∞–π–ª–∞
     */
    async writeJsonFile(filePath, data, pretty = true) {
        const content = pretty ? 
            JSON.stringify(data, null, 2) : 
            JSON.stringify(data);
            
        await this.writeFile(filePath, content);
        return true;
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ YAML —Ñ–∞–π–ª–∞ (–ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
     */
    async writeYamlFile(filePath, data) {
        // –ü—Ä–æ—Å—Ç–∞—è YAML –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        const yamlContent = this.objectToYaml(data);
        await this.writeFile(filePath, yamlContent);
        return true;
    }
    
    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –≤ YAML
     */
    objectToYaml(obj, indent = 0) {
        let yaml = '';
        const spaces = '  '.repeat(indent);
        
        if (Array.isArray(obj)) {
            obj.forEach(item => {
                if (typeof item === 'object') {
                    yaml += `${spaces}- \
${this.objectToYaml(item, indent + 1)}`;
                } else {
                    yaml += `${spaces}- ${item}\
`;
                }
            });
        } else if (typeof obj === 'object' && obj !== null) {
            Object.keys(obj).forEach(key => {
                if (typeof obj[key] === 'object' && obj[key] !== null) {
                    if (Array.isArray(obj[key])) {
                        yaml += `${spaces}${key}:\
`;
                        yaml += this.objectToYaml(obj[key], indent + 1);
                    } else {
                        yaml += `${spaces}${key}:\
${this.objectToYaml(obj[key], indent + 1)}`;
                    }
                } else {
                    yaml += `${spaces}${key}: ${obj[key]}\
`;
                }
            });
        }
        
        return yaml;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
     */
    getGeneratedFiles() {
        return [...this.generatedFiles];
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
     */
    clearGeneratedFilesList() {
        this.generatedFiles = [];
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    getGenerationStats() {
        const stats = {
            totalFiles: this.generatedFiles.length,
            byExtension: {},
            totalSize: 0
        };
        
        this.generatedFiles.forEach(filePath => {
            const ext = path.extname(filePath).toLowerCase() || 'no-extension';
            stats.byExtension[ext] = (stats.byExtension[ext] || 0) + 1;
            
            try {
                const stat = fs.statSync(filePath);
                stats.totalSize += stat.size;
            } catch {
                // –§–∞–π–ª –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            }
        });
        
        return stats;
    }
    
    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
     */
    async validateGeneratedFiles() {
        const results = {
            valid: true,
            errors: [],
            warnings: []
        };
        
        for (const filePath of this.generatedFiles) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                await access(filePath, fs.constants.F_OK);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
                await access(filePath, fs.constants.R_OK);
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
                const ext = path.extname(filePath).toLowerCase();
                
                if (ext === '.json') {
                    const content = fs.readFileSync(filePath, 'utf-8');
                    try {
                        JSON.parse(content);
                    } catch (parseError) {
                        results.errors.push(`Invalid JSON in ${filePath}: ${parseError.message}`);
                        results.valid = false;
                    }
                }
                
                if (ext === '.js') {
                    const content = fs.readFileSync(filePath, 'utf-8');
                    
                    // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ JS —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
                    if (content.includes('syntax error') || content.includes('undefined')) {
                        results.warnings.push(`Potential issues in ${filePath}`);
                    }
                }
                
            } catch (error) {
                results.errors.push(`File ${filePath}: ${error.message}`);
                results.valid = false;
            }
        }
        
        return results;
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (—Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)
     */
    async createArchive(outputPath, format = 'zip') {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å node-archiver –∏–ª–∏ –ø–æ–¥–æ–±–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É
        console.log(`üì¶ Archive creation (${format}) is not implemented yet`);
        console.log(`Files to archive: ${this.generatedFiles.length}`);
        console.log(`Output would be: ${outputPath}`);
        
        return {
            success: false,
            message: 'Archive creation not implemented',
            files: this.generatedFiles.length
        };
    }
}